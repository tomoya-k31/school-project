正規表現

特定の文字列の集合の要素を表す表記法を正規表現という。
コンピュータでテキスト処理をを行う際の重要な方法である。
正規表現にはいくつかのバリエーションがあるが、ここでは
C++11で追加された正規表現の指定方法であるstd::ECMAScript構文について学ぶ。
ECMAScriptとはJavaScriptの標準であるので、ここで学ぶ方法はJavaScriptでも
使用できる。

0)正規表現とは文字列のパターンを特殊な文字列で指定するものである

1)一文字の指定
	\t : 水平タブにマッチする
	\n : 改行文字にマッチする
	\r : キャリッジリターン文字にマッチする
	\0 : ヌル文字にマッチする
	.　: ドットは改行文字(\rや\n)以外の１文字とマッチする
	\d : 10進数の数字にマッチするdigit
	\s : ホワイトスペースにマッチする
	\w : 英数字または下線文字にマッチする
2)一文字の範囲指定
　角括弧を使ってマッチする一文字のクラスを指定する
	[abc] :abcのどれかの一文字
	[a-z] :aからzのどれかの一文字
	[\t\n]:\tまたは\nのどちらか
　さらに、[^範囲] によって補集合を指定する
	[^abc] :abc以外の一文字
3)繰り返しの指定
	* : 0またはそれ以上の繰り返し
	+ : 1回以上の繰り返し
	? : あってもなくても良い(0 or 1)
	{x} : xを整数として, ちょうどx回の繰り返し
	{x,}: x回以上の繰り返し
	{x,y}:x,yを整数として、x回以上y回未満の繰り返し
　例：
	.* : 任意の長さの文字列
	a{3}: aaa
	[a-zA-Z_][\d\w]* : c++の変数/関数などの命名法と同じ
4)条件
	^ : 続くパターンは行頭を意味する
	$ : 前のパターンが行末を意味する
	\b: 単語の区切りB
　例：
	^abc$ : 行頭から始まりabc行末となる文字列
	\bxx$ : 行末にあるxxにマッチ、axxにはマッチしない
5)パターンの選択
	abc | xyz : abcまたはxyzのどちらか
6)(サブパターン) グループ化とマッチした文字列を後で参照するための保存
　\1や\2で取り出す
　例：
	<([a-z]+)>.*</\1> : htmlやxmlのタグにマッチする
7)(?:サブパターン) グループ化のみでマッチした文字列は保存しない
8)エスケープ文字：上記の特殊文字は\を使って無効化できる


C++のRAW文字列
C++の文字列リテラルでは\文字が特殊な意味を持っているため、
例えば正規表現の\wを指定するには"\\w"と書かねばならない。
RAW文字列は\文字の繰り返しをやめることのできる方法である。
R"(文字列)"とする。
例：
	"[\\d\\w]*" と R"([\d\w]*)" は同じ文字列
RAW文字列はラベルをつけてあとの検索をしやすくできる。
例：
	R"var([a-zA-Z_][\d\w]*)var"
